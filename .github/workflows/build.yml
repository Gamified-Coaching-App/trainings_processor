name: Build and Push Docker Image to GHCR

on:
  push:
    branches:
      - main  # Set to your default branch

env:
  IMAGE_TAG: ghcr.io/gamified-coaching-app/training_processing_api:v1.0

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  build_and_push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write  # Required for GITHUB_TOKEN authentication

    steps:
    - name: Check Out Repo
      uses: actions/checkout@v2
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: GabrielOppermann
        password: ${{ secrets.DOCKER_PAT }}

    - name: Build and Push Docker Image
      uses: docker/build-push-action@v2
      with:
        context: .  
        file: ./Dockerfile  
        push: true
        tags: ${{ env.IMAGE_TAG }} 
  
  deploy_stack:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
    - name: Check Out Repo
      uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2 
  
    - name: Deploy CloudFormation Stack
      run: |
        set -e
        aws cloudformation deploy \
          --template-file infrastructure/template.yaml \
          --stack-name TrainingsProcessorStack \
          --capabilities CAPABILITY_NAMED_IAM \
          --parameter-overrides TrainingDockerImageTag=${{ env.IMAGE_TAG }} \
          --no-fail-on-empty-changeset \
          --region eu-west-2 \
          --debug
    
    - name: Check CloudFormation Outputs
      run: |
        aws cloudformation describe-stacks \
          --stack-name TrainingsProcessorStack \
          --query "Stacks[0].Outputs" \
          --output json

    - name: Get ECS Service Name
      id: get_ecs_service_name
      run: |
        ecs_service_name=$(aws ecs list-services \
          --cluster TrainingsProcessorCluster \
          --query "serviceArns[0]" \
          --output text)
        echo "ecs_service_name=${ecs_service_name##*/}" >> $GITHUB_ENV

      
    - name: Update ECS deployment
      run: |
        set -e
        aws ecs update-service \
          --cluster TrainingsProcessorCluster \
          --service ${{ env.ecs_service_name }} \
          --force-new-deployment
      shell: /usr/bin/bash -e {0}
      env:
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
        AWS_DEFAULT_REGION: eu-west-2
        AWS_REGION: eu-west-2
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}