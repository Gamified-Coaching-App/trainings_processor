AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to deploy Docker container in ECS using EC2 instances and VPC, with HTTPS support.

Parameters:
  TrainingLatestAmiId:
    Description: The latest AMI ID for ECS-optimized Amazon Linux 2.
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
  
  TrainingDockerImageTag:
    Description: Docker image tag to deploy
    Type: String
    Default: 'latest'

Resources:
  TrainingVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  TrainingPublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TrainingVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true

  TrainingPublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TrainingVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true

  TrainingInternetGateway:
    Type: AWS::EC2::InternetGateway

  TrainingVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref TrainingVPC
      InternetGatewayId: !Ref TrainingInternetGateway

  TrainingPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TrainingVPC

  TrainingPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref TrainingPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref TrainingInternetGateway

  TrainingSubnetRouteTableAssociationOne:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref TrainingPublicSubnetOne
      RouteTableId: !Ref TrainingPublicRouteTable

  TrainingSubnetRouteTableAssociationTwo:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref TrainingPublicSubnetTwo
      RouteTableId: !Ref TrainingPublicRouteTable

  TrainingEC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
       
  TrainingEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - Ref: TrainingEC2InstanceRole

  TrainingECSInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Combined default and custom ECS instance security group"
      VpcId: !Ref TrainingVPC
      SecurityGroupIngress:
        - IpProtocol: "-1"
          UserIdGroupPairs:
            - GroupId: !GetAtt TrainingECSInstanceSecurityGroup.GroupId
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 65535
          CidrIp: "0.0.0.0/0"

  TrainingEC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: TrainingECSLaunchTemplate
      LaunchTemplateData:
        InstanceType: t2.micro
        ImageId: !Ref TrainingLatestAmiId
        IamInstanceProfile:
          Arn: !GetAtt TrainingEC2InstanceProfile.Arn
        SecurityGroupIds:
          - !Ref TrainingECSInstanceSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            echo ECS_CLUSTER=${TrainingECSCluster} >> /etc/ecs/ecs.config
            echo ECS_ENABLE_TASK_IAM_ROLE=true >> /etc/ecs/ecs.config
            echo ECS_ENABLE_TASK_IAM_ROLE_NETWORK_HOST=true >> /etc/ecs/ecs.config

  TrainingAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      LaunchTemplate:
        LaunchTemplateId: !Ref TrainingEC2LaunchTemplate
        Version: !GetAtt TrainingEC2LaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref TrainingPublicSubnetOne
        - !Ref TrainingPublicSubnetTwo

  TrainingLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Subnets:
        - !Ref TrainingPublicSubnetOne
        - !Ref TrainingPublicSubnetTwo
      SecurityGroups:
        - !Ref TrainingECSInstanceSecurityGroup

  TrainingECSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref TrainingVPC
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/health"
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 2

  TrainingHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - TrainingLoadBalancer
      - TrainingECSTargetGroup
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TrainingECSTargetGroup
      LoadBalancerArn: !Ref TrainingLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: "arn:aws:acm:eu-west-2:590183778243:certificate/14647f6d-bd8f-44cf-ad49-fe24ac123ab4"

  TrainingTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: training-processing-task
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - EC2
      ContainerDefinitions:
        - Name: training-processing-container
          Image: !Ref TrainingDockerImageTag
          Essential: true
          PortMappings:
            - ContainerPort: 80
              HostPort: 80

  TrainingECSService:
    Type: AWS::ECS::Service
    DependsOn: TrainingHTTPSListener
    Properties:
      Cluster: !Ref TrainingECSCluster
      DesiredCount: 1
      TaskDefinition: !Ref TrainingTaskDefinition
      LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref TrainingPublicSubnetOne
            - !Ref TrainingPublicSubnetTwo
      LoadBalancers:
        - ContainerName: training-processing-container
          ContainerPort: 80
          TargetGroupArn: !Ref TrainingECSTargetGroup